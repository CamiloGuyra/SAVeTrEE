/* ***********************SAVETREE*********************** *
 * Script: SAVETREE                                       *
 * Authors: Joshua Verkerke, Anna McGarrigle, John Dilger *
 * Date: July 26, 2017                                    *
 * Project: Lassen Volcanic NP Disasters, Summer 2017     *
 * Contact: annamcgarrigle@gmail.com                      *
 * URL: https://goo.gl/Z6ZLh7                             *
 *                                                        *
 * Description: Compute temporal trend as a linear        *
 *    regression analysis of a specified spectral index   *
 *    over a specified time period for Lassen Volcanic NP *
 *    using data from the Landsat series of satellites.   *
 * Usage: Requires access to Earth Engine Assets (Google  *
 *    equivalent of shapefiles) from the library:         *
 *    "users/annamcgarrigle/".                            *
 * Parameters:                                            *
 *  In: Year for Mortality Map, Duration for analysis,    *
 *      Spectral Index (SI) for analysis, Export Option.  *
 *  Out:  Display of trend results and bivariate plot.    *
 *        Optionally output to Google Drive TIFF images   *
 *        for trends (Coefficients), and Bivariate plot.  *
 * ****************************************************** */

/* *********************PROMPT USER********************** *
 * This section gets input from the user, and sets up     *
 * other necessary global variables including locations   *
 * and color ramps for visualization                      *
 * ****************************************************** */
 
///////////////////////////////////////////////////////////////
/////////////////////// STABLE INPUTS /////////////////////////
///////////////////////////////////////////////////////////////

var allyr, SI , dur, yr, coef, bivariate, combo;

////FEATURES
 var lavo_bnd = ee.FeatureCollection("users/annamcgarrigle/LVNP/LVNP_BND"),
    lavo_center = ee.FeatureCollection("users/annamcgarrigle/LVNP/LVNP_Center"),
    Lakes = ee.FeatureCollection("users/annamcgarrigle/LVNP/Lassen_Lakes");
    
////VIZ PARAMS   
var FCIR = {"opacity":1,"bands":["NIR","RED","GREEN"],"min":0,"max":4000},
    TCC = {"opacity":1,"bands":["RED","GREEN","BLUE"],"min":0,"max":4000},
    COEF = {"opacity":1,"bands":["t"],"min":-90,"max":60,
      "palette":["ff0000","1500cc","00ff00"]},
    LGND = {"opacity":1,"min":-90,"max":60,
      "palette":["ff0000","1500cc","00ff00"]},
    BIV = {"min":1, "max":9, "palette": ['eff5f5', 'b0d5df', '64acbe',
      'e4acac', 'ad9ea5', '627f8c', 'c85a5a', '985356', '574249']};     
 
///////////////////////////////////////////////////////////////
///////////////// CALCULATING MORTALITY ///////////////////////
///////////////////////////////////////////////////////////////


//apply filters input in UI widget
function applyFilters() {
  // Set filter variables.
  yr = selectYr.getValue();
  if (yr) yr = ee.Number.parse(yr);
  dur = selectDur.getValue();
  if (dur) dur = ee.Number.parse(dur).subtract(1);
  SI = selectSI.getValue();
  if (SI) SI = ee.String(SI);
  
  // Convert input numeric year to Surface Reflectance growing season
  // collection for a single year
  var getICSR = function(year){
    year = ee.Number(year);
    var IC = ee.Algorithms.If(
                year.eq(ee.Number(2012)),ee.ImageCollection('LANDSAT/LE7_SR'),
                ee.Algorithms.If(year.gt(ee.Number(2012)),
                    ee.ImageCollection('LANDSAT/LC8_SR'),
                    ee.ImageCollection('LANDSAT/LT5_SR')));
    var ICfilter = ee.ImageCollection(IC).filter(ee.Filter.dayOfYear(135,258))
                                                //15May->15Sep (Peak Green)
                      .filter(ee.Filter.calendarRange(year,year,'year'))
                      .filterBounds(lavo_center);
                      //calls global var in function, didn't have time to fix
    return ICfilter;
  };
  
  // Rename image bands to simplify processing
  var bandRename = function(image){
    var year = ee.Number.parse(ee.String(image.get('system:index'))
      .slice(9,13));
    var renameList = ee.Algorithms.If(year.gt(ee.Number(2012)),
        ['AEROSOL','BLUE','GREEN','RED','NIR','SWIR1',
        'SWIR2','cfmask','cfmask_conf'],
            ['BLUE','GREEN','RED','NIR','SWIR1','SWIR2','cfmask','cfmask_conf',
            'sr_atmos_opacity','sr_adjacent_cloud_qa','sr_cloud_qa',
            'sr_cloud_shadow_qa','sr_ddv_qa','sr_fill_qa',
            'sr_land_water_qa','sr_snow_qa']);
    return image.rename(renameList);
  };
  
  //grab cloud band and add it to SR image
  var cloudSR = function(image){
    var time = image.get('system:time_start');
    var year = ee.Number.parse(ee.String(image.get('system:index'))
                .slice(9,13));
    var ICTOA = ee.ImageCollection(ee.Algorithms.If(year.eq(ee.Number(2012)),
      ee.ImageCollection('LANDSAT/LE7_L1T_TOA'),
      ee.Algorithms.If(year.gt(ee.Number(2012)),
        ee.ImageCollection('LANDSAT/LC8_L1T_TOA'),
        ee.ImageCollection('LANDSAT/LT5_L1T_TOA'))));
    var TOAImg = ee.Image(ICTOA.filter(
      ee.Filter.eq('system:time_start',time)).first());
    var cloudband = ee.Algorithms.Landsat.simpleCloudScore(TOAImg)
                      .select('cloud');
    return image.addBands(image.expression('5*(100-CLOUD)',
                          {'CLOUD':cloudband}).rename('CLEAR'));
  };
  
  // Remove high value artifacts over snow
  var maskHi = function(image){
    var newBand = image.expression('b("BLUE")+b("GREEN")+b("RED")');
    var hiMask = newBand.lt(24000);
    return image.updateMask(hiMask);
  };
  
  // Compute desired Spectral Indices
  var indices = function(image) {
    return image.addBands(image.normalizedDifference(['NIR', 'RED'])
      .multiply(ee.Image.constant(1000)).rename('NDVI'))
    .addBands(image.normalizedDifference(['NIR', 'SWIR1'])
      .multiply(ee.Image.constant(1000)).rename('NDMI'))
    .addBands(image.normalizedDifference(['GREEN', 'NIR'])
      .multiply(ee.Image.constant(1000)).rename('NDWI'))
    .addBands(image.normalizedDifference(['NIR', 'SWIR2'])
      .multiply(ee.Image.constant(1000)).rename('NBR'));
  };
  
  var quality = function(image) {
    return image.addBands(image.expression('b("CLEAR") + b("NDVI")')
            .rename('QUAL'));
  };
  
  // Input list of year & bounding geometry, add SI bands and time series bands,
  // then filter annual collection  to a single "greenest pixel" composite
  var cleanSR = function(year_geo){
    year_geo = ee.List(year_geo);
    var year = year_geo.get(0);
    var geo = ee.FeatureCollection(year_geo.get(1)).geometry();
    var IC = getICSR(year);
    var collection = IC
      .map(bandRename)
      .map(cloudSR)
      .map(maskHi)
      .map(indices)
      .map(quality)
      .map(function(image){return image.clip(geo);});
    var output = collection.qualityMosaic('QUAL')  
      .copyProperties(collection, ['title'])
      .set({'year':year});
    return ee.Image(output)
      .addBands(ee.Image(ee.Number(year).subtract(1983)).rename('t').float())
      .addBands(ee.Image.constant(1));
  };
  
  // Function to apply the cleanSR function to the time period to generate an
  // ImageCollection
  var series = function(year,geo, duration){
    var yrlist = ee.List.sequence(year.subtract(duration),year);//.reverse();
    var yrgeo = yrlist.zip(ee.List.repeat(geo,yrlist.length()));
    var IClist = ee.ImageCollection.fromImages(yrgeo.map(cleanSR));
    return IClist;
  };
  
  // Generate the time series ImageCollection
  allyr = series(yr,lavo_bnd,dur);

  // Generate the linear regression series as a new image, pulling from the
  // ImageCollection
  var indep = ee.List(['constant','t']);
  var dep = ee.String(SI);
  var trend = allyr.select(indep.add(dep))
                .reduce(ee.Reducer.linearRegression(indep.length(),1));
  coef = trend.select('coefficients')
          .arrayProject([0])
          .arrayFlatten([indep]);
  coef = coef.addBands(coef.select('t').multiply(dur.add(1)).rename('change'));
  
  // Generate a Bivariate map for the final year in the series
  var finalImg = ee.Image(allyr.filterMetadata('year','equals',yr).first())
                  .select(['NDMI','NDVI']);
  var ndviBand = finalImg.select('NDVI');
  var ndmiBand = finalImg.select('NDMI');
  // Classify NDVI & NDMI combinations
  var ndvi1 = ndviBand.lt(200);
  var ndvi2 = ndviBand.gte(200).and(ndviBand.lt(450));
  var ndvi3 = ndviBand.gte(450);
  var ndmiA = ndmiBand.lt(-200);
  var ndmiB = ndmiBand.gte(-200).and(ndmiBand.lt(50));
  var ndmiC = ndmiBand.gte(50);
  // Create binary layers for each of the 9 classes
  var A1 = ndmiA.and(ndvi1);var A2 = ndmiA.and(ndvi2);var A3 = ndmiA.and(ndvi3);
  var B1 = ndmiB.and(ndvi1);var B2 = ndmiB.and(ndvi2);var B3 = ndmiB.and(ndvi3);
  var C1 = ndmiC.and(ndvi1);var C2 = ndmiC.and(ndvi2);var C3 = ndmiC.and(ndvi3);
  // Create Class layers
  A1 = ee.Image.constant(1).updateMask(A1).unmask();
  A2 = ee.Image.constant(2).updateMask(A2).unmask();
  A3 = ee.Image.constant(3).updateMask(A3).unmask();
  B1 = ee.Image.constant(4).updateMask(B1).unmask();
  B2 = ee.Image.constant(5).updateMask(B2).unmask();
  B3 = ee.Image.constant(6).updateMask(B3).unmask();
  C1 = ee.Image.constant(7).updateMask(C1).unmask();
  C2 = ee.Image.constant(8).updateMask(C2).unmask();
  C3 = ee.Image.constant(9).updateMask(C3).unmask();
  // Combine into a single image
  combo = A1.add(A2).add(A3).add(B1).add(B2).add(B3).add(C1).add(C2)
            .add(C3).clip(lavo_bnd);
  bivariate = combo.select('constant');
  // Display the Classified image, NDVI & NDMI Bivariate plot for the current
  // year, the Coefficients(slope) layer of the time series, and Lakes overlay
  Map.centerObject(lavo_bnd,12);
  Map.addLayer(bivariate, BIV, 'Bivariate');
  Map.addLayer(coef,COEF,'Coefficients');
  Map.addLayer(Lakes,{},'Lakes');
}


///////////////////////////////////////////////////////////////
/////////////////////// WIDGET PANEL //////////////////////////
///////////////////////////////////////////////////////////////

/* Create UI Panels */
var panel = ui.Panel({style: {width:'300px'}});
ui.root.insert(0,panel);
/* Introduction */
var intro = ui.Label('SAVETREE', 
  {fontWeight: 'bold', fontSize: '24px', margin: '10px 5px'}
);
var subtitle = ui.Label('Compute temporal trend as a linear regression'+
  ' analysis of a specified spectral index over a specified time period'+
  ' for Lassen Volcanic NP using data from the Landsat series of satellites.'+
  ' Defaults to calculate NDMI ending in 2016 at a 5 year interval');
panel.add(intro).add(subtitle);

/* 1. Select Spectral Index */
var step1 = ui.Label('1. Select spectral index');
var selectSI = ui.Select({
  items:['NDMI','NDVI','NDWI','NBR'],
  placeholder:'Select  index',
  value: 'NDMI'}); //defaults to NDMI
panel.add(step1).add(selectSI);

/* 2. Select Year and Duration of Time Series */
var textboxStyle = ui.Textbox({style: {width:'8px'}});
var selectYr = ui.Textbox({placeholder: 'Year',  value: '2016',
  style: {width: '100px'}}); //defaults to 2016
var selectDur = ui.Textbox({placeholder: 'Duration',  value: '5',
  style: {width: '100px'}}); //defaults to 5 yrs
panel.add(ui.Label('2. Select end year and duration of time series'));
var datasetRange_label = ui.Label('From 1984-2016',
  {margin: '0 0 0 10px',fontSize: '12px',color: 'gray'});
var durRange_label = ui.Label('Recommend 3-5 years',
  {margin: '0 0 0 18px',fontSize: '12px',color: 'gray'});

var durRange_subtext = ui.Panel([datasetRange_label, durRange_label],
  ui.Panel.Layout.flow('horizontal'));
var row2 = ui.Panel([selectYr, selectDur],
  ui.Panel.Layout.flow('horizontal'));
panel.add(durRange_subtext).add(row2);

/* 3. Calculate */
var runButton = ui.Button('Add  to map', applyFilters);
panel.add(ui.Label('3. Create time series')).add(runButton);
  
  //Add layer checkboxes
  //Create boxes below, then add them before each legend
  var bivBox = ui.Checkbox('Bivariate map', true);
  var coefBox = ui.Checkbox('Coeffecient Trend', true)
  
  var toggleLayers = function(layer) {
    maps.map(function(map) {
      var layer = map.layers().get(0)
      layer.setShown(!layer.getShown())
    })
  };
  bivBox.onChange(function(checked) { //toggles Bivariate map
    Map.layers().get(0).setShown(checked);
  });
  coefBox.onChange(function(checked) {//toggles Coefficient map
    Map.layers().get(1).setShown(checked);
  });

  //Create legend
  function makeLegend(vis) {
    var lon = ee.Image.pixelLonLat().select('longitude');
    var gradient = lon.multiply((vis.max-vis.min)/100.0).add(vis.min);
    var legendImage = gradient.visualize(vis);
   
    //Coefficient legend
    var thumb = ui.Thumbnail({
      image: legendImage, 
      params: {bbox:'0,0,100,8', dimensions:'300x15'},  
      style: {position: 'bottom-center'}
    });
    var text = ui.Panel({
      widgets: [
        ui.Label(String('Decline')),
        ui.Label({style: {stretch: 'horizontal'}}),
        ui.Label(String('Stable')),
        ui.Label({style: {stretch: 'horizontal'}}),
        ui.Label(String('Growth')),
      ],
      layout: ui.Panel.Layout.flow('horizontal'),
      style: {
        padding: '0px',
        stretch: 'horizontal',
        fontSize: '12px', 
        color: 'gray',
        textAlign: 'center'
      }
    });
    
    return ui.Panel({style:{position: 'bottom-left'}})
      .add(text).add(thumb);
  }
  
  panel.add(coefBox).add(makeLegend(LGND));
  
  //Bivariate Legend
  var viz = ['eff5f5', 'b0d5df', '64acbe', 'e4acac', 
                'ad9ea5', '627f8c', 'c85a5a', '985356', '574249'];
  // Text in legend
  var legendTitle = ui.Label({
    value: 'Bivariate Classification' });
  var green = ui.Label('Peak green',
    {margin: '0 0 0 10px',fontSize: '12px',color: 'gray', padding: '10'});
  var healthy = ui.Label('Max health',
    {margin: '0 0 0 30px',fontSize: '12px',color: 'gray', padding: '10'});
  var textTop = ui.Panel([green, healthy], 
      ui.Panel.Layout.flow('horizontal'));
  var wet = ui.Label('Peak moisture',
    {margin: '5px 0 0 60px',fontSize: '12px',color: 'gray'});
  var dry = ui.Label('O',
    {margin: '5px 0 0 20px',fontSize: '12px',color: 'gray'});
  var textBottom = ui.Panel([dry, wet], 
      ui.Panel.Layout.flow('horizontal'));
    
  panel.add(bivBox).add(textTop);
  
  //Add 9 color boxes
  var makeRow = function(color1, color2, color3) {
    // Create the label that is actually the colored box.
    var colorBox1 = ui.Label({
      style: {
        backgroundColor: '#' + color1,
        // Use padding to give the box height and width.
        padding: '10px',
        margin: '0 0 0 40px'
      }
    });
     var colorBox2 = ui.Label({
      style: {
        backgroundColor: '#' + color2,
        // Use padding to give the box height and width.
        padding: '10px',
        margin: '0 0 0 0'
      }
    });
     var colorBox3 = ui.Label({
      style: {
        backgroundColor: '#' + color3,
        // Use padding to give the box height and width.
        padding: '10px',
        margin: '0 0 0 0'
      }
    });
  
    return ui.Panel({
      widgets: [colorBox1, colorBox2, colorBox3],
      layout: ui.Panel.Layout.Flow('horizontal')
    });
  };
  
    for (var i = 2; i > -1; i = i-1) {
      panel.add(makeRow(viz[i], viz[i+3], viz[i+6]));
    }
  
  panel.add(textBottom);

/* 4. Export image to drive */
var export_sub = ui.Label('To iniate export, click "Export to Drive" below, drag down code, click "Tasks", and "Run"',
  {margin: '0 0 0 10px',fontSize: '12px',color: 'gray'});
var exportButton = ui.Button('Export to Drive', exportImages);
panel.add(ui.Label('4. Export trend and bivariate maps')).add(export_sub).add(exportButton);

function exportImages(){
  Export.image.toDrive({
    image: coef,
    description: 'TimeSeriesFor'+yr.subtract(dur).getInfo()+
                  '-'+yr.getInfo(),
    fileNamePrefix: yr.subtract(dur).getInfo()+'_'+yr.getInfo()+'_'
                    +SI.getInfo()+'_TREND',
    folder: 'SAVETREE',
    scale: 30,
    region: lavo_bnd,
    skipEmptyTiles: true,
    crs: 'EPSG:3857'
  });
  
  Export.image.toDrive({
    image: bivariate.visualize(BIV),
    description: 'BivariatePlotFor' + yr.getInfo(),
    fileNamePrefix: yr.getInfo()+'_NDMI_NDVI_Bivariate', 
    folder: 'SAVETREE',
    scale: 30,
    region: lavo_bnd,
    skipEmptyTiles: true,
    crs: 'EPSG:3857'
  });
}

/////MANUAL INSPECTOR TOOL/////

// Create an intro panel with labels.
var intro = ui.Panel([
  ui.Label({
    value: 'Change Inspector',
    style: {fontSize: '18px', fontWeight: 'bold'}
  }),
  ui.Label('Click a point on the map to inspect.')
]);
panel.add(intro);

// Create panels to hold lon/lat values.
var lon = ui.Label();
var lat = ui.Label();
panel.add(ui.Panel([lon, lat], ui.Panel.Layout.flow('horizontal')));

// Register a callback on the default map to be invoked when the map is clicked.
Map.onClick(function(coords) {
// Update the lon/lat panel with values from the click event.
  lon.setValue('lon: ' + coords.lon.toFixed(2));
  lat.setValue('lat: ' + coords.lat.toFixed(2));

var longitude = ee.Algorithms.String(lon.setValue('lon: ' + coords.lon.toFixed(2)));
// Add a dot for the point clicked on.
var point = ee.Geometry.Point(coords.lon, coords.lat);
var dot = ui.Map.Layer(point, {color: 'FFFFFF'});
Map.layers().set(3, dot);

// Create a chart of the spectral index selected by user.
var indexChart = ui.Chart.image.seriesByRegion(allyr, point,
  ee.Reducer.mean(), SI.getInfo(), 200, 'year');
indexChart.setOptions({
    title: SI.getInfo() + ' over ' + dur.getInfo() + ' years',
    vAxis: {title: SI.getInfo()},//,minValue: -100, maxValue: 1000},
        //this range is +/-1000 because indices are scaled above
    hAxis: {title: 'Date', format: '', gridlines: {count: dur}},
    lineWidth: 1,
    pointSize: 3,
  })
  .setSeriesNames([SI.getInfo()]);
panel.add(indexChart);
});
Map.style().set('cursor', 'crosshair');

/////////////////////////////////////////////////////////////////////////////////////////

